/**
 *  Copyright (C) 2002-2016   The FreeCol Team
 *
 *  This file is part of FreeCol.
 *
 *  FreeCol is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  FreeCol is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with FreeCol.  If not, see <http://www.gnu.org/licenses/>.
 */

package net.sf.freecol.common.model;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.xml.stream.XMLStreamException;

import net.sf.freecol.common.io.FreeColXMLReader;
import net.sf.freecol.common.io.FreeColXMLWriter;
import static net.sf.freecol.common.util.CollectionUtils.*;
import static net.sf.freecol.common.util.StringUtils.*;


/**
 * Represents the type of one of the nations present in the game.
 */
public abstract class NationType extends FreeColSpecObjectType {
    // Serialization

    private static final String AGGRESSION_TAG = "aggression";
    private static final String NUM_SET_TAG = "number-of-settlements";
    private static final String SETTLEMENT_TAG = "settlement";

    public static enum SettlementNumber {
        LOW, AVERAGE, HIGH;

        /**
         * Get a message key for this settlement number.
         *
         * @return A message key.
         */
        public String getKey() {
            return "settlementNumber." + getEnumKey(this);
        }
    }

    public static enum AggressionLevel {
        LOW, AVERAGE, HIGH;

        /**
         * Get a message key for this aggression level.
         *
         * @return A message key.
         */
        public String getKey() {
            return "aggressionLevel." + getEnumKey(this);
        }
    }


    /** The number of settlements this Nation has. */
    private SettlementNumber numSettle = SettlementNumber.AVERAGE;

    /** The aggression of this Nation. */
    private AggressionLevel aggression = AggressionLevel.AVERAGE;

    /** The types of settlement this Nation has. */
    private List<SettlementType> settlementTypes = null;


    /**
     * Default nation type constructor.
     *
     * @param identifier The object identifier.
     * @param specification The <code>Specification</code> to refer to.
     */
    public NationType(final String identifier, final Specification specification) {
        super(identifier, specification);
    }


    /**
     * Get the settlement types.
     *
     * @return A list of <code>SettlementType</code>s.
     */
    public final List<SettlementType> getSettlementTypes() {
        return (settlementTypes == null)
            ? Collections.<SettlementType>emptyList()
            : settlementTypes;
    }

    /**
     * Add a settlement type.
     *
     * @param settlementType The <code>SettlementType</code> to add.
     */
    private void addSettlementType(final SettlementType settlementType) {
        if (settlementTypes == null) {
        	settlementTypes = new ArrayList<>();
        }
        settlementTypes.add(settlementType);
    }

    /**
     * Add settlement types.
     *
     * @param types A list of <code>SettlementType</code>s to add.
     */
    private void addSettlementTypes(final List<SettlementType> types) {
        if (settlementTypes == null) {
        	settlementTypes = new ArrayList<>();
        }
        settlementTypes.addAll(types);
    }

    /**
     * Gets the settlement type for the national capital.
     *
     * @return The capital <code>SettlementType</code>.
     */
    public SettlementType getCapitalType() {
        return getSettlementType(true);
    }

    /**
     * Gets the settlement type for a settlement of this nation.
     *
     * @param isCapital If true, get the capital type.
     * @return The settlement type.
     */
    public SettlementType getSettlementType(final boolean isCapital) {
        return find(getSettlementTypes(), settlement -> settlement.isCapital() == isCapital);
    }

    /**
     * Get a settlement type by identifier.
     *
     * @param identifier The object identifier.
     * @return The settlement type.
     */
    public SettlementType getSettlementType(final String identifier) {
        return find(getSettlementTypes(), settlement -> identifier.equals(settlement.getId()));
    }

    /**
     * Get the national number of settlements.
     *
     * @return The <code>SettlementNumber</code>.
     */
    public final SettlementNumber getNumberOfSettlements() {
        return numSettle;
    }

    /**
     * Get the national aggression.
     *
     * @return The national <code>AggressionLevel</code>.
     */
    public final AggressionLevel getAggression() {
        return aggression;
    }

    /**
     * Whether this is a EuropeanNation, i.e. a player or a REF.
     *
     * @return True if this is an European nation.
     */
    public abstract boolean isEuropean();

    /**
     * Whether this is a IndianNation.
     *
     * @return True if this is a native nation.
     */
    public abstract boolean isIndian();

    /**
     * Whether this is a EuropeanREFNation.
     *
     * @return True if this is a REF nation.
     */
    public abstract boolean isREF();

    /**
     * {@inheritDoc}
     */
    @Override
    protected void writeAttributes(final FreeColXMLWriter xWriter) throws XMLStreamException {
        super.writeAttributes(xWriter);

        xWriter.writeAttribute(NUM_SET_TAG, numSettle);

        xWriter.writeAttribute(AGGRESSION_TAG, aggression);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void writeChildren(final FreeColXMLWriter xWriter) throws XMLStreamException {
        super.writeChildren(xWriter);

        for (final SettlementType settlementType : getSettlementTypes()) {
            settlementType.toXML(xWriter, SETTLEMENT_TAG);
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void readAttributes(final FreeColXMLReader xReader) throws XMLStreamException {
        super.readAttributes(xReader);

        final Specification spec = getSpecification();

        final NationType parent = xReader.getType(spec, EXTENDS_TAG,
                                       NationType.class, this);

        numSettle = xReader.getAttribute(NUM_SET_TAG,
            SettlementNumber.class, parent.numSettle);

        aggression = xReader.getAttribute(AGGRESSION_TAG,
                                     AggressionLevel.class, parent.aggression);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void readChildren(final FreeColXMLReader xReader) throws XMLStreamException {
        // Clear containers.
        if (xReader.shouldClearContainers()) {
            settlementTypes = null;
        }

        final Specification spec = getSpecification();
        final NationType parent = xReader.getType(spec, EXTENDS_TAG,
                                       NationType.class, this);
        if (parent != this) {
            if (parent.settlementTypes != null) {
                addSettlementTypes(parent.settlementTypes);
            }

            addFeatures(parent);
            if (parent.isAbstractType()) {
                getFeatureContainer().replaceSource(parent, this);
            }
        }

        super.readChildren(xReader);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected void readChild(final FreeColXMLReader xReader) throws XMLStreamException {
        final Specification spec;
        final String tag = xReader.getLocalName();

        if (SETTLEMENT_TAG.equals(tag)) {
        	spec = getSpecification();
            addSettlementType(new SettlementType(xReader, spec));

        } else {
            super.readChild(xReader);
        }
    }
}
